
#### Demonstrate the call back

    const write = (err,data)=>{
     fs.writeFile('./text.txt',"abshadhasgd","utf-8",(err,data)=>
    console.log("file is written"),
      fs.readFile('./text.txt', 'utf-8',(err,data)=>{
          console.log(data);
      })
    );
    }

#### Demonstrate promises
A promise can have following state:
pending, fullfilled, rejected

    let write = ()=>{
    return new Promise((resolve, reject)=>{
        fs.readFile('text2.txt', 'utf-8', (err,data)=>{
          if(err){
            reject(err);
          }
            resolve(data);
        })

    })
    }


#### Demonstarte async await
    let test = async()=>{

        let data = await write();

        console.log(data);

        }

    test();
    console.log("here");

#### Promise.all
    var p1 = Promise.resolve(3);
    var p2 = 1337;
    var p3 = new Promise((resolve, reject) => {
    setTimeout(() => {
    resolve("foo");
     }, 100);
    });

    Promise.all([p1, p2, p3]).then(values => {
     console.log(values); // [3, 1337, "foo"]
    });


#### Demonstrate arrays

    spread operators
    let array1 = [1,2,3,4];
    let array2 = [...array1,5,6,7];

    rest operators
    let func = (...args) =()=>P{}  //takes one or multiple arguments

    map
    let array3 = array2.map((ele)=>{
    return ele*2;
    });

    push and pop
    let pop1 = array2.pop();
    array2.pop();
    array2.push(7);

    filter
    let filt1= array1.filter((ele)=>ele<3);
    console.log(filt1);

    includes
    let inc1=  array1.includes(3);
    console.log(inc1);

    reduce (single output value)
    let arr2 = [3,5,6,9,11]
    let red1= arr2.reduce((accumulator, currentvalue)=>{
    return accumulator+currentvalue;
    },18)

    let arr3 = ["cat", "dog","camel"];
    let red2= arr3.reduce((accumulator, currentvalue)=>{
    return accumulator+currentvalue;
    })



#### var and let

    var is function scope
    let is block scope
    hoisting - the process where all declaration of var are made ta the top.

    for(var i=0; i<=100; i++){
        //does something
    }
    console.log(i);//i = 101

    for(let i=0; i<=100; i++){
        //does something
    }
    console.log(i); //there is an error


#### event loop

    To state it bluntly, an event loop is that entity which pulls first element in the event queue and places it on the
    function execution stack whenever the function stack becomes empty.
    take SetTimeout for example-> when time out is called it is placed in to the stack-> set Time out calls the web Api provided to us
    by the browser, set the timer. Once completed, the callback function is placed on to the event queue. Once the function call stack
    is empty, event loop takes the first element on the queue to the stack. This is event loop.


#### map in javascript

    let map = new Map();
    map.set("bob", 2);
    map.set("charlie", 4);
    map.set("alice", 5);

    for(let [key,value] of map){
    console.log(`${key} is the key and ${value} is the value.`)
    }

    for(let value of map.values()){
        console.log(`${value} is the value.`)
    }

    let ele = map.get("bob");
    console.log(ele);
    console.log(map.has("bob"));


#### RESTful API'S
    client and server are independent of each other.
    no client data is stored in server.- stateless.
    cacheable- clients can cache response to improve performance

    example:
    POST request to /user/123 creates a user with the ID 123 using the body data
    PUT request to /user/123 updates user 123 with the body data
    GET request to /user/123 returns the details of user 123
    DELETE request to /user/123 deletes user 123


#### == and ===  
    both are comparison operators
    == compares value and not types
    === compare value and types


#### let and const
    to define variables
    cannot reassign for const
    if it an object we can add or delete elements but cannot reassign

#### undefined and null
    undefined-> when u define a variable and not assign a value
    null -> we assign to clean up
    typeof(undefined) is undefined but typeof(null) is object

#### arrow functions
    resolves ambuiguity of this keyword. Instead of assigning to window object, assigns to the current scope.

#### prototypal inheritance
    every object has a property called prototype, which can be used to add methods. When we create other object with these object.
    The newly created object automatically inherits the property of the parent but not by including in itself but by accessing the parent method.
    This makes the objects lighter.

#### function declaration and function expression
    function declaration is a function , whereas function expression is an anonymous function saved in a variable.


#### closure and how to use it
    Closures are nothing but functions with preserved data.
    simple example is a function that uses variable declared outside is accessible inside.
    simple example:::
    var add = (first)=>{
        var addSecond = (second)=>{
            return first+second;
        }
        return addSecond;
    }
    var addClosure = add(1);

    console.log(addClosure(4)); //prserves one ad adds 4 to it


#### debugging
    in vs code we have to add configuration in launch.json and give path to the file.
    unit testing and integration test
    test single unit  in isolation.
    anything which is not in isolaion is integration test. (two or more modules).


1. What are the data types in javascript?
=> 6 basic types:
  Number
  BigInt  -> n in the end  
  String
  Boolean
  null
  undefined

2. push and unshift?
=> push adds to end of an array.
  unshift adds to the begining of the array.
  or use spread operator.


3. call, apply and bind.
=> In js, it is not necessary for objects to have its own properties and methods. We can bind objects to functions in following way:  

var obj = {num:2}
              var addToThis = function(a,b,c){
                return this.num + a + b + c;
              }

              call:
              console.log(addToThis.call(obj,3,2,3));   // 10

              apply:
              var arr[1,2,3]  
              console.log(addToThis.apply(obj,arr)) //8

              bind:

              var bound = addToThis.bind(obj);

              console.log(bound(1,2,3))   //8

4. Callback higher order functions?
=> yes, a function can be passed to other function as argument.

5. REPL?
=> read-eval-print-loop , it is quick and easy way to test simple node.js/javascript.

7. Prototype Inheritence
=> When it comes to inheritance, JavaScript only has one construct: objects. Each object has a private property which holds a link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype, and acts as the final link in this prototype chain.

8. Soap and Rest.
=> Soap uses XML for all messages, transport independent (REST requires HTTP), built in error handling


9. finally in javascript
  The finally statement lets you execute code, after try and catch, regardless of the result. (need to use either catch or finalize)

10. Anonymous Function:
=> Anonymous function is a function without a name. Can be assigned to variable or passed as an argument.

11. Event emitter, event handlers
=>  Event emitter: Many objects in Node emit emits for example fs.readStream emits a event when the file is opened. EventEmitter class lies in events module. Provides multiple properties
                    like "on" , "emit". New listener is added=> newListener event is fired, removed=> removeListener event is fired, error => emits error event
    Event Handlers: They are javascript code that are not added inside script tag but inside html tags, that execute js when something happens.
                    eg:  onClick= "alert(hello!)"  syntax: name_of_handler = "Javscript code here"




#### Questions asked to me in interviews

1. Promises and Async await, lets say I have a promise add which return a promise, how to handle in async await.
2. Const
3. Event loop - Explain how it works
4. Have you worked on any event handling in node.jsx`
5. How to resolve the package.lock.json if it is corrupt.
